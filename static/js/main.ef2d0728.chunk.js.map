{"version":3,"sources":["components/layout/Content.tsx","components/layout/Header.tsx","components/layout/Footer.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["jsonAbc","require","style","Pane","marginBottom","marginTop","padding","Content","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleInput","event","setState","input","currentTarget","value","formatJSON","object","JSON","parse","state","sorted","sortObj","output","stringify","error","message","react","index_es","container","item","sm","variant","component","onChange","defaultValue","React","Header","position","color","Footer","App","react_default","a","createElement","Header_Header","Content_Content","Footer_Footer","Component","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","ReactDOM","render","src_App","document","getElementById","URL","process","href","origin","addEventListener","concat","fetch","response","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"8OAGMA,EAAUC,EAAQ,KAElBC,EAAQ,CACZC,KAAM,CACJC,aAAc,GACdC,UAAW,GACXC,QAAS,KAWPC,cACJ,SAAAA,EAAYC,GAAc,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACxBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KAORQ,YAAc,SAACC,GACbR,EAAKS,SAAS,CAACC,MAAOF,EAAMG,cAAcC,OAAQZ,EAAKa,aAT/Bb,EAY1Ba,WAAa,WACX,IACE,IAAMC,EAASC,KAAKC,MAAMhB,EAAKiB,MAAMP,OAC/BQ,EAAS3B,EAAQ4B,QAAQL,GAC/Bd,EAAKS,SAAS,CACZW,OAAQL,KAAKM,UAAUH,EAAQ,KAAM,KAEvC,MAAOI,GACPtB,EAAKS,SAAS,CACZW,OAAQE,EAAMC,YAnBlBvB,EAAKiB,MAAQ,CACXP,MAAO,gCACPU,OAAQ,IAJcpB,mFA2BxBG,KAAKU,8CAIL,OACEW,EAAA,cAACC,EAAA,EAAD,CAAMC,WAAS,GACbF,EAAA,cAACC,EAAA,EAAD,CAAME,MAAI,EAACC,IAAE,GACXJ,EAAA,cAACC,EAAA,EAAD,CAAOhC,MAAOA,EAAMC,MAClB8B,EAAA,cAACC,EAAA,EAAD,CAAYI,QAAQ,KAAKC,UAAU,MAAnC,SAGAN,EAAA,cAACC,EAAA,EAAD,CAAYK,UAAU,WAAWC,SAAU5B,KAAKI,YAAayB,aAAc7B,KAAKc,MAAMP,UAG1Fc,EAAA,cAACC,EAAA,EAAD,CAAME,MAAI,EAACC,IAAE,GACXJ,EAAA,cAACC,EAAA,EAAD,CAAOhC,MAAOA,EAAMC,MAClB8B,EAAA,cAACC,EAAA,EAAD,CAAYI,QAAQ,KAAKC,UAAU,MAAnC,UAGAN,EAAA,cAACC,EAAA,EAAD,CAAYK,UAAU,OAAO3B,KAAKc,MAAMG,kBA/C9Ba,aCjBhBC,mLAEF,OACEV,EAAA,cAACC,EAAA,EAAD,CAAQU,SAAS,UACfX,EAAA,cAACC,EAAA,EAAD,KACED,EAAA,cAACC,EAAA,EAAD,CAAYI,QAAQ,WAAWO,MAAM,WAArC,sBALWH,aCDfI,mLAEF,OACEb,EAAA,yBACEA,EAAA,yCAJaS,aCaNK,mLAVX,OACEC,EAAAC,EAAAC,cAACjB,EAAA,SAAD,KACEe,EAAAC,EAAAC,cAACC,EAAD,MACAH,EAAAC,EAAAC,cAACE,EAAD,MACAJ,EAAAC,EAAAC,cAACG,EAAD,cANUC,aCHZC,UAAcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MAAM,4DA0CnC,SAASC,EAAgBC,EAAeC,GACtCC,UAAUC,cACPC,SAASJ,GACTK,KAAK,SAAAC,GACJA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACd,MAApBD,IAGJA,EAAiBE,cAAgB,WACA,cAA3BF,EAAiB5C,QACfsC,UAAUC,cAAcQ,YAI1BC,QAAQC,IACN,gHAKEZ,GAAUA,EAAOa,UACnBb,EAAOa,SAASR,KAMlBM,QAAQC,IAAI,sCAGRZ,GAAUA,EAAOc,WACnBd,EAAOc,UAAUT,UAO5BU,MAAM,SAAA/C,GACL2C,QAAQ3C,MAAM,4CAA6CA,KCjFjEgD,IAASC,OAAOhC,EAAAC,EAAAC,cAAC+B,EAAD,MAASC,SAASC,eAAe,SDO1C,SAAkBpB,GACvB,GAA6C,kBAAmBC,UAAW,CAGzE,GADkB,IAAIoB,IAAKC,GAA2D5B,OAAOC,SAAS4B,MACxFC,SAAW9B,OAAOC,SAAS6B,OAIvC,OAGF9B,OAAO+B,iBAAiB,OAAQ,WAC9B,IAAM1B,EAAK,GAAA2B,OAAMJ,GAAN,sBAEP9B,GAgEV,SAAiCO,EAAeC,GAE9C2B,MAAM5B,GACHK,KAAK,SAAAwB,GAEJ,IAAMC,EAAcD,EAASE,QAAQC,IAAI,gBACjB,MAApBH,EAASI,QAAkC,MAAfH,IAA8D,IAAvCA,EAAYI,QAAQ,cAEzEhC,UAAUC,cAAcgC,MAAM9B,KAAK,SAAAC,GACjCA,EAAa8B,aAAa/B,KAAK,WAC7BV,OAAOC,SAASyC,aAKpBtC,EAAgBC,EAAOC,KAG1Be,MAAM,WACLJ,QAAQC,IAAI,mEAjFVyB,CAAwBtC,EAAOC,GAI/BC,UAAUC,cAAcgC,MAAM9B,KAAK,WACjCO,QAAQC,IACN,+GAMJd,EAAgBC,EAAOC,MCjC/BE","file":"static/js/main.ef2d0728.chunk.js","sourcesContent":["import {Grid, Paper, Typography} from '@material-ui/core';\nimport * as React from 'react';\n\nconst jsonAbc = require('jsonabc');\n\nconst style = {\n  Pane: {\n    marginBottom: 10,\n    marginTop: 10,\n    padding: 20,\n  },\n};\n\ninterface Props {}\n\ninterface State {\n  input: string;\n  output: string;\n}\n\nclass Content extends React.Component<Props, State> {\n  constructor(props: Props) {\n    super(props);\n    this.state = {\n      input: '{\"name\": \"Sophie\", \"age\": 50}',\n      output: '',\n    };\n  }\n\n  handleInput = (event: React.ChangeEvent<HTMLTextAreaElement>) => {\n    this.setState({input: event.currentTarget.value}, this.formatJSON);\n  };\n\n  formatJSON = () => {\n    try {\n      const object = JSON.parse(this.state.input);\n      const sorted = jsonAbc.sortObj(object);\n      this.setState({\n        output: JSON.stringify(sorted, null, 2),\n      });\n    } catch (error) {\n      this.setState({\n        output: error.message,\n      });\n    }\n  };\n\n  componentDidMount() {\n    this.formatJSON();\n  }\n\n  render() {\n    return (\n      <Grid container>\n        <Grid item sm>\n          <Paper style={style.Pane}>\n            <Typography variant=\"h5\" component=\"h3\">\n              Input\n            </Typography>\n            <Typography component=\"textarea\" onChange={this.handleInput} defaultValue={this.state.input} />\n          </Paper>\n        </Grid>\n        <Grid item sm>\n          <Paper style={style.Pane}>\n            <Typography variant=\"h5\" component=\"h3\">\n              Output\n            </Typography>\n            <Typography component=\"pre\">{this.state.output}</Typography>\n          </Paper>\n        </Grid>\n      </Grid>\n    );\n  }\n}\n\nexport {Content};\n","import {AppBar, Toolbar, Typography} from '@material-ui/core';\nimport * as React from 'react';\n\nclass Header extends React.Component {\n  render() {\n    return (\n      <AppBar position=\"static\">\n        <Toolbar>\n          <Typography variant=\"headline\" color=\"inherit\">\n            Sort JSON\n          </Typography>\n        </Toolbar>\n      </AppBar>\n    );\n  }\n}\n\nexport {Header};\n","import * as React from 'react';\n\nclass Footer extends React.Component {\n  render() {\n    return (\n      <div>\n        <p>Footer</p>\n      </div>\n    );\n  }\n}\n\nexport {Footer};\n","import React, {Component, Fragment} from 'react';\nimport {Content, Footer, Header} from './components/layout/';\n\nclass App extends Component {\n  render() {\n    return (\n      <Fragment>\n        <Header />\n        <Content />\n        <Footer />\n      </Fragment>\n    );\n  }\n}\n\nexport default App;\n","const isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL((process as {env: {[key: string]: string}}).env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (response.status === 404 || (contentType != null && contentType.indexOf('javascript') === -1)) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nserviceWorker.register();\n"],"sourceRoot":""}