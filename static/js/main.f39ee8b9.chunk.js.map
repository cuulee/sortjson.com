{"version":3,"sources":["JSONInput.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["jsonAbc","require","JSONInput","_PureComponent","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","myinput","myoutput","value","state","inherits","createClass","key","e","currentTarget","obj","JSON","parse","sorted","sortObj","stringify","error","message","console","_this2","react_default","a","createElement","id","onChange","handleChange","ref","input","readOnly","output","PureComponent","App","className","JSONInput_JSONInput","Component","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","log","onUpdate","onSuccess","catch","ReactDOM","render","src_App_0","document","getElementById","URL","process","href","origin","addEventListener","concat","fetch","response","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.f39ee8b9.chunk.js","sourcesContent":["import React, {ChangeEvent, PureComponent} from 'react';\nconst jsonAbc = require('jsonabc');\n\ninterface JSONInputState {\n  value: string;\n}\n\ninterface JSONInputProps {}\n\nexport class JSONInput extends PureComponent<JSONInputProps, JSONInputState> {\n  myinput: HTMLTextAreaElement | null;\n  myoutput: HTMLTextAreaElement | null;\n  value: string;\n\n  constructor(props: JSONInputProps) {\n    super(props);\n    this.myinput = null;\n    this.myoutput = null;\n    this.value = '';\n    this.state = {\n      value: '',\n    };\n  }\n  handleChange(e: ChangeEvent<HTMLTextAreaElement>) {\n    if (this.myoutput) {\n      if (e.currentTarget.value) {\n        try {\n          const obj = JSON.parse(e.currentTarget.value);\n          const sorted = jsonAbc.sortObj(obj);\n          this.myoutput.value = JSON.stringify(sorted, null, 2);\n        } catch (error) {\n          this.myoutput.value = error.message;\n          console.error(error);\n        }\n      } else {\n        this.myoutput.value = '';\n      }\n    }\n  }\n  render() {\n    return (\n      <div>\n        <div>\n          Input\n          <br />\n          <textarea\n            id=\"input\"\n            onChange={e => {\n              this.handleChange(e);\n            }}\n            ref={input => (this.myinput = input)}\n          />\n        </div>\n        <br />\n        <div>\n          Output\n          <br />\n          <textarea id=\"output\" readOnly ref={output => (this.myoutput = output)} />\n        </div>\n      </div>\n    );\n  }\n}\n","import React, {Component} from 'react';\n\nimport './App.css';\nimport {JSONInput} from './JSONInput';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <p>Sort JSON</p>\n        </header>\n        <div id=\"area\">\n          <JSONInput />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","const isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL((process as {env: {[key: string]: string}}).env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (response.status === 404 || (contentType != null && contentType.indexOf('javascript') === -1)) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nserviceWorker.register();\n"],"sourceRoot":""}