{"version":3,"sources":["components/layout/Content.tsx","AppTheme.tsx","AppProvider.tsx","components/layout/Header.tsx","components/layout/Footer.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["jsonAbc","require","styles","theme","createStyles","Button","margin","spacing","unit","Pane","padding","Content","props","_this","Object","_home_florian_git_sortjson_com_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_2__","this","_home_florian_git_sortjson_com_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_4__","_home_florian_git_sortjson_com_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_getPrototypeOf__WEBPACK_IMPORTED_MODULE_5__","call","formatJSON","object","JSON","parse","state","input","sorted","sortObj","setState","output","stringify","outputInfo","formatObject","eval","concat","error","formatText","split","sort","a","b","localeCompare","filter","Boolean","join","handleInput","event","currentTarget","value","copyToClipboard","_ref","_home_florian_git_sortjson_com_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_asyncToGenerator__WEBPACK_IMPORTED_MODULE_1__","_home_florian_git_sortjson_com_node_modules_babel_preset_react_app_node_modules_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default","mark","_callee","nav","result","wrap","_context","prev","next","navigator","permissions","query","name","sent","clipboard","writeText","stop","_x","apply","arguments","pasteFromClipboard","_ref2","_callee2","pasteText","_context2","readText","inputInfo","_x2","age","classes","react__WEBPACK_IMPORTED_MODULE_9__","_material_ui_core__WEBPACK_IMPORTED_MODULE_8__","container","item","xs","sm","className","variant","component","fullWidth","helperText","id","multiline","onChange","rows","rowsMax","Infinity","style","InputLabelProps","shrink","hasClipboardSupport","color","onClick","disabled","hasClipboardAPI","isNotFirefox","userAgent","toLowerCase","indexOf","React","withStyles","AppTheme","react","AppContext","Consumer","context","core_styles","createMuiTheme","palette","type","typography","useNextVariants","index_es","children","localStorage","getItem","setItem","action","switchTheme","AppProvider","classCallCheck","possibleConstructorReturn","getPrototypeOf","getTheme","_this2","Provider","setTheme","Header","inDarkMode","AppBarWrapper","position","row","Title","DarkModeControl","control","checked","label","href","mdi_material_ui_index_es","flexGrow","userSelect","lineHeight","paddingLeft","Footer","align","Imprint","gutterBottom","process","marginTop","App","AppProvider_AppProvider","src_AppTheme","layout_Header","layout_Footer","window","location","hostname","match","ReactDOM","render","react_default","createElement","src_App","document","getElementById","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.c61cc2bd.chunk.js","sourcesContent":["import {\n  Button,\n  Grid,\n  Paper,\n  TextField,\n  Theme,\n  Typography,\n  WithStyles,\n  createStyles,\n  withStyles,\n} from '@material-ui/core';\nimport * as React from 'react';\n\nconst jsonAbc = require('jsonabc');\n\nconst styles = (theme: Theme) =>\n  createStyles({\n    Button: {\n      margin: theme.spacing.unit,\n    },\n    Pane: {\n      margin: '20px',\n      padding: theme.spacing.unit * 2,\n    },\n  });\n\ninterface Props extends WithStyles<typeof styles> {}\n\ninterface State {\n  input: string;\n  inputInfo: string;\n  output: string;\n  outputInfo: string;\n}\n\nclass Content extends React.Component<Props, State> {\n  constructor(props: Props) {\n    super(props);\n    this.state = {\n      input: JSON.stringify({name: 'Sophie', age: 50}, null, 2),\n      inputInfo: 'Please paste your unformatted JSON here.',\n      output: '',\n      outputInfo: '',\n    };\n  }\n\n  formatJSON = () => {\n    const object = JSON.parse(this.state.input);\n    const sorted = jsonAbc.sortObj(object);\n    this.setState({\n      output: JSON.stringify(sorted, null, 2),\n      outputInfo: 'Formatted and sorted JSON result.',\n    });\n  };\n\n  formatObject = () => {\n    try {\n      if (this.state.input) {\n        const input = eval(`JSON.stringify(${this.state.input})`);\n        this.setState({input}, this.formatJSON);\n      } else {\n        this.setState({output: ''});\n      }\n    } catch (error) {\n      this.formatText();\n    }\n  };\n\n  formatText = () => {\n    const output = this.state.input\n      .split('\\n')\n      .sort((a, b) => a.localeCompare(b))\n      .filter(Boolean)\n      .join('\\n');\n    this.setState({output, outputInfo: `No valid JSON import. Treated input as text when sorting it.`});\n  };\n\n  handleInput = (event: React.ChangeEvent<HTMLTextAreaElement>) => {\n    this.setState({input: event.currentTarget.value}, this.formatObject);\n  };\n\n  get hasClipboardSupport() {\n    const hasClipboardAPI = typeof (navigator as any).clipboard !== 'undefined';\n    const isNotFirefox = navigator.userAgent.toLowerCase().indexOf('firefox') === -1;\n    return hasClipboardAPI && isNotFirefox;\n  }\n\n  copyToClipboard = async (event: React.MouseEvent<HTMLInputElement>) => {\n    const nav = navigator as NavigatorPermissions.NavigatorPermissions;\n    if (nav.permissions) {\n      const result = await nav.permissions.query({name: 'clipboard-write'});\n      if (result.state == 'granted' || result.state == 'prompt') {\n        (navigator as any).clipboard.writeText(this.state.output);\n        this.setState({\n          outputInfo: 'Copied output into clipboard.',\n        });\n      }\n    }\n  };\n\n  pasteFromClipboard = async (event: React.MouseEvent<HTMLInputElement>) => {\n    const nav = navigator as NavigatorPermissions.NavigatorPermissions;\n    if (nav.permissions) {\n      const result = await nav.permissions.query({name: 'clipboard-read'});\n      if (result.state == 'granted' || result.state == 'prompt') {\n        const pasteText = await (navigator as any).clipboard.readText();\n        this.setState(\n          {\n            input: pasteText,\n            inputInfo: 'Pasted clipboard content into input.',\n          },\n          this.formatObject\n        );\n      }\n    }\n  };\n\n  componentDidMount() {\n    this.formatJSON();\n  }\n\n  render() {\n    const {classes} = this.props;\n\n    return (\n      <Grid container>\n        <Grid item xs={12} sm={6}>\n          <Paper className={classes.Pane}>\n            <Typography variant=\"h5\" component=\"h3\">\n              Input\n            </Typography>\n            <TextField\n              fullWidth\n              helperText={this.state.inputInfo}\n              id=\"jsonInput\"\n              multiline={true}\n              onChange={this.handleInput}\n              rows={4}\n              rowsMax={Infinity}\n              style={{margin: 8}}\n              value={this.state.input}\n              variant=\"filled\"\n              InputLabelProps={{\n                shrink: true,\n              }}\n            />\n            {this.hasClipboardSupport && (\n              <Button className={classes.Button} color=\"inherit\" onClick={this.pasteFromClipboard} variant=\"contained\">\n                Paste\n              </Button>\n            )}\n          </Paper>\n        </Grid>\n        <Grid item xs={12} sm={6}>\n          <Paper className={classes.Pane}>\n            <Typography variant=\"h5\" component=\"h3\">\n              Output\n            </Typography>\n            <TextField\n              disabled\n              fullWidth\n              helperText={this.state.outputInfo}\n              id=\"jsonOutput\"\n              multiline={true}\n              rows={4}\n              rowsMax={Infinity}\n              style={{margin: 8}}\n              value={this.state.output}\n              variant=\"filled\"\n              InputLabelProps={{\n                shrink: true,\n              }}\n            />\n            {this.hasClipboardSupport && (\n              <Button className={classes.Button} color=\"inherit\" onClick={this.copyToClipboard} variant=\"contained\">\n                Copy\n              </Button>\n            )}\n          </Paper>\n        </Grid>\n      </Grid>\n    );\n  }\n}\n\nexport default withStyles(styles)(Content);\n","import {CssBaseline, MuiThemeProvider, PaletteType, createMuiTheme} from '@material-ui/core';\nimport * as React from 'react';\nimport {AppContext} from './AppProvider';\n\nclass AppTheme extends React.Component {\n  static getTheme(): PaletteType {\n    if (typeof localStorage !== 'undefined') {\n      const theme = localStorage.getItem('theme');\n      return theme === 'light' ? 'light' : 'dark';\n    } else {\n      return 'light';\n    }\n  }\n\n  static setTheme(name: PaletteType) {\n    if (typeof localStorage !== 'undefined') {\n      localStorage.setItem('theme', name);\n    }\n  }\n\n  render() {\n    return (\n      <AppContext.Consumer>\n        {context => (\n          <MuiThemeProvider\n            theme={createMuiTheme({\n              palette: {\n                type: context.state.theme,\n              },\n              typography: {\n                useNextVariants: true,\n              },\n            })}\n          >\n            <CssBaseline />\n            {this.props.children}\n          </MuiThemeProvider>\n        )}\n      </AppContext.Consumer>\n    );\n  }\n}\n\nexport default AppTheme;\n","import {PaletteType} from '@material-ui/core';\nimport * as React from 'react';\nimport AppTheme from './AppTheme';\n\ninterface Context {\n  action: {\n    switchTheme: (name: PaletteType) => void;\n  };\n  state: State;\n}\n\nconst AppContext = React.createContext<Context>({\n  action: {\n    switchTheme: (name: PaletteType) => {},\n  },\n  state: {\n    theme: 'light',\n  },\n});\n\ninterface Props {}\n\ninterface State {\n  theme: PaletteType;\n}\n\nclass AppProvider extends React.Component<Props, State> {\n  constructor(props: Props) {\n    super(props);\n    this.state = {\n      theme: AppTheme.getTheme(),\n    };\n  }\n\n  render() {\n    return (\n      <AppContext.Provider\n        value={{\n          action: {\n            switchTheme: (name: PaletteType) =>\n              this.setState(\n                {\n                  theme: name,\n                },\n                () => {\n                  AppTheme.setTheme(this.state.theme);\n                }\n              ),\n          },\n          state: this.state,\n        }}\n      >\n        {this.props.children}\n      </AppContext.Provider>\n    );\n  }\n}\n\nexport {AppContext, AppProvider};\n","import {\n  AppBar,\n  FormControl,\n  FormControlLabel,\n  FormGroup,\n  IconButton,\n  Switch,\n  Theme,\n  Typography,\n  WithStyles,\n  createStyles,\n  withStyles,\n} from '@material-ui/core';\nimport {GithubCircle} from 'mdi-material-ui';\nimport * as React from 'react';\nimport {AppContext} from '../../AppProvider';\nimport AppTheme from '../../AppTheme';\n\nconst styles = (theme: Theme) =>\n  createStyles({\n    AppBarWrapper: {\n      flexGrow: 1,\n    },\n    DarkModeControl: {\n      userSelect: 'none',\n    },\n    Title: {\n      flexGrow: 1,\n      lineHeight: '48px',\n      paddingLeft: '20px',\n    },\n  });\n\ninterface Props extends WithStyles<typeof styles> {}\n\ninterface State {\n  inDarkMode: boolean;\n}\n\nclass Header extends React.Component<Props, State> {\n  constructor(props: Props) {\n    super(props);\n    this.state = {\n      inDarkMode: AppTheme.getTheme() === 'dark',\n    };\n  }\n\n  render() {\n    const {classes} = this.props;\n\n    return (\n      <AppContext.Consumer>\n        {context => (\n          <div className={classes.AppBarWrapper}>\n            <AppBar color=\"default\" position=\"static\">\n              <FormControl>\n                <FormGroup row>\n                  <Typography className={classes.Title} color=\"inherit\" variant=\"h5\">\n                    Sort JSON\n                  </Typography>\n                  <FormControlLabel\n                    className={classes.DarkModeControl}\n                    control={\n                      <Switch\n                        color=\"primary\"\n                        checked={this.state.inDarkMode}\n                        onChange={() => {\n                          this.setState(\n                            {\n                              inDarkMode: !this.state.inDarkMode,\n                            },\n                            () => {\n                              if (this.state.inDarkMode) {\n                                context.action.switchTheme('dark');\n                              } else {\n                                context.action.switchTheme('light');\n                              }\n                            }\n                          );\n                        }}\n                        value=\"inDarkMode\"\n                      />\n                    }\n                    label=\"Dark Mode\"\n                  />\n                  <IconButton color=\"inherit\" href=\"https://github.com/ffflorian/sortjson.com\">\n                    <GithubCircle />\n                  </IconButton>\n                </FormGroup>\n              </FormControl>\n            </AppBar>\n          </div>\n        )}\n      </AppContext.Consumer>\n    );\n  }\n}\n\nexport default withStyles(styles)(Header);\n","import {Theme, Typography, WithStyles, createStyles, withStyles} from '@material-ui/core';\nimport * as React from 'react';\n\nconst version = process.env.REACT_APP_VERSION || '';\n\nconst styles = (theme: Theme) =>\n  createStyles({\n    Imprint: {\n      marginTop: '10px',\n      paddingLeft: '20px',\n    },\n  });\n\ninterface Props extends WithStyles<typeof styles> {}\n\ninterface State {}\n\nclass Footer extends React.Component<Props, State> {\n  constructor(props: Props) {\n    super(props);\n  }\n\n  render() {\n    const {classes} = this.props;\n\n    return (\n      <Typography align=\"left\" className={classes.Imprint} gutterBottom={true}>\n        {`Version ${version}`}\n      </Typography>\n    );\n  }\n}\n\nexport default withStyles(styles)(Footer);\n","import * as React from 'react';\nimport {AppProvider} from './AppProvider';\nimport AppTheme from './AppTheme';\nimport {Content, Footer, Header} from './components/layout/';\n\nclass App extends React.Component {\n  render() {\n    return (\n      <AppProvider>\n        <AppTheme>\n          <Header />\n          <Content />\n          <Footer />\n        </AppTheme>\n      </AppProvider>\n    );\n  }\n}\n\nexport default App;\n","const isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL((process as {env: {[key: string]: string}}).env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (response.status === 404 || (contentType != null && contentType.indexOf('javascript') === -1)) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}