{"version":3,"sources":["components/layout/Content.tsx","components/layout/Header.tsx","components/layout/Footer.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["jsonAbc","require","styles","theme","createStyles","Pane","marginBottom","marginTop","padding","Content","props","_this","Object","_home_florian_git_sortjson_com_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_0__","this","_home_florian_git_sortjson_com_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_2__","_home_florian_git_sortjson_com_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_getPrototypeOf__WEBPACK_IMPORTED_MODULE_3__","call","formatJSON","object","JSON","parse","state","input","sorted","sortObj","setState","output","stringify","outputInfo","formatObject","eval","concat","error","formatText","split","sort","a","b","localeCompare","filter","Boolean","join","handleInput","event","currentTarget","value","name","age","inputInfo","classes","react__WEBPACK_IMPORTED_MODULE_7__","_material_ui_core__WEBPACK_IMPORTED_MODULE_6__","container","spacing","item","xs","sm","className","variant","component","fullWidth","helperText","multiline","onChange","placeholder","rows","rowsMax","Infinity","style","margin","InputLabelProps","shrink","disabled","React","withStyles","Header","react","index_es","position","color","Footer","gutterBottom","align","App","Header_Header","Footer_Footer","isLocalhost","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","ReactDOM","render","react_default","createElement","src_App","document","getElementById","URL","process","href","origin","addEventListener","fetch","response","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.a3fce883.chunk.js","sourcesContent":["import {Grid, Paper, TextField, Theme, Typography, WithStyles, createStyles, withStyles} from '@material-ui/core';\nimport * as React from 'react';\n\nconst jsonAbc = require('jsonabc');\n\nconst styles = (theme: Theme) =>\n  createStyles({\n    Pane: {\n      marginBottom: 10,\n      marginTop: 10,\n      padding: 20,\n    },\n  });\n\ninterface Props extends WithStyles<typeof styles> {}\n\ninterface State {\n  input: string;\n  inputInfo: string;\n  output: string;\n  outputInfo: string;\n}\n\nclass Content extends React.Component<Props, State> {\n  constructor(props: Props) {\n    super(props);\n    this.state = {\n      input: JSON.stringify({name: 'Sophie', age: 50}, null, 2),\n      inputInfo: 'Please paste your unformatted JSON here.',\n      output: '',\n      outputInfo: '',\n    };\n  }\n\n  formatJSON = () => {\n    const object = JSON.parse(this.state.input);\n    const sorted = jsonAbc.sortObj(object);\n    this.setState({\n      output: JSON.stringify(sorted, null, 2),\n      outputInfo: 'Formatted and sorted JSON result.',\n    });\n  };\n\n  formatObject = () => {\n    try {\n      if (this.state.input) {\n        const input = eval(`JSON.stringify(${this.state.input})`);\n        this.setState({input}, this.formatJSON);\n      } else {\n        this.setState({output: ''});\n      }\n    } catch (error) {\n      this.formatText();\n    }\n  };\n\n  formatText = () => {\n    const output = this.state.input\n      .split('\\n')\n      .sort((a, b) => a.localeCompare(b))\n      .filter(Boolean)\n      .join('\\n');\n    this.setState({output, outputInfo: `No valid JSON import. Treated input as text when sorting it.`});\n  };\n\n  handleInput = (event: React.ChangeEvent<HTMLTextAreaElement>) => {\n    this.setState({input: event.currentTarget.value}, this.formatObject);\n  };\n\n  componentDidMount() {\n    this.formatJSON();\n  }\n\n  render() {\n    const {classes} = this.props;\n\n    return (\n      <Grid container spacing={24}>\n        <Grid item xs={12} sm={6}>\n          <Paper className={classes.Pane}>\n            <Typography variant=\"h5\" component=\"h3\">\n              Input\n            </Typography>\n            <TextField\n              fullWidth\n              helperText={this.state.inputInfo}\n              multiline={true}\n              onChange={this.handleInput}\n              placeholder={this.state.input}\n              rows={4}\n              rowsMax={Infinity}\n              style={{margin: 8}}\n              variant=\"filled\"\n              InputLabelProps={{\n                shrink: true,\n              }}\n            />\n          </Paper>\n        </Grid>\n        <Grid item xs={12} sm={6}>\n          <Paper className={classes.Pane}>\n            <Typography variant=\"h5\" component=\"h3\">\n              Output\n            </Typography>\n            <TextField\n              disabled\n              fullWidth\n              helperText={this.state.outputInfo}\n              multiline={true}\n              rows={4}\n              rowsMax={Infinity}\n              style={{margin: 8}}\n              value={this.state.output}\n              variant=\"filled\"\n              InputLabelProps={{\n                shrink: true,\n              }}\n            />\n          </Paper>\n        </Grid>\n      </Grid>\n    );\n  }\n}\n\nexport default withStyles(styles)(Content);\n","import {AppBar, Toolbar, Typography} from '@material-ui/core';\nimport * as React from 'react';\n\nclass Header extends React.Component {\n  render() {\n    return (\n      <AppBar position=\"static\">\n        <Toolbar>\n          <Typography variant=\"headline\" color=\"inherit\">\n            Sort JSON\n          </Typography>\n        </Toolbar>\n      </AppBar>\n    );\n  }\n}\n\nexport {Header};\n","import {Typography} from '@material-ui/core';\nimport * as React from 'react';\n\nclass Footer extends React.Component {\n  render() {\n    return (\n      <Typography style={{margin: 10}} gutterBottom={true} align=\"left\">\n        {`Version 1.0`}\n      </Typography>\n    );\n  }\n}\n\nexport {Footer};\n","import * as React from 'react';\nimport {Footer, Header} from './components/layout/';\nimport Content from './components/layout/Content';\n\nclass App extends React.Component {\n  render() {\n    return (\n      <React.Fragment>\n        <Header />\n        <Content />\n        <Footer />\n      </React.Fragment>\n    );\n  }\n}\n\nexport default App;\n","const isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL((process as {env: {[key: string]: string}}).env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (response.status === 404 || (contentType != null && contentType.indexOf('javascript') === -1)) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nserviceWorker.register();\n"],"sourceRoot":""}