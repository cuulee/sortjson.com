{"version":3,"sources":["components/layout/Header.tsx","components/layout/Footer.tsx","components/layout/Content.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Header","react","index_es","position","variant","color","React","Footer","style","margin","gutterBottom","align","jsonAbc","require","Content","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleInput","event","setState","input","currentTarget","value","formatJSON","object","JSON","parse","state","sorted","sortObj","output","stringify","error","message","name","age","classes","container","spacing","item","xs","sm","className","Pane","component","fullWidth","helperText","id","multiline","onChange","placeholder","rows","rowsMax","Infinity","InputLabelProps","shrink","disabled","withStyles","theme","createStyles","marginBottom","marginTop","padding","App","Header_Header","layout_Content","Footer_Footer","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","ReactDOM","render","react_default","a","createElement","src_App","document","getElementById","URL","process","href","origin","addEventListener","concat","fetch","response","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"kPAGMA,mLAEF,OACEC,EAAA,cAACC,EAAA,EAAD,CAAQC,SAAS,UACfF,EAAA,cAACC,EAAA,EAAD,KACED,EAAA,cAACC,EAAA,EAAD,CAAYE,QAAQ,WAAWC,MAAM,WAArC,sBALWC,aCAfC,mLAEF,OACEN,EAAA,cAACC,EAAA,EAAD,CAAYM,MAAO,CAACC,OAAQ,IAAKC,cAAc,EAAMC,MAAM,QAA3D,sBAHeL,qBCAfM,EAAUC,EAAQ,KAkBlBC,cACJ,SAAAA,EAAYC,GAAc,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACxBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KAORQ,YAAc,SAACC,GACbR,EAAKS,SAAS,CAACC,MAAOF,EAAMG,cAAcC,OAAQZ,EAAKa,aAT/Bb,EAY1Ba,WAAa,WACX,IACE,IAAMC,EAASC,KAAKC,MAAMhB,EAAKiB,MAAMP,OAC/BQ,EAAStB,EAAQuB,QAAQL,GAC/Bd,EAAKS,SAAS,CACZW,OAAQL,KAAKM,UAAUH,EAAQ,KAAM,KAEvC,MAAOI,GACPtB,EAAKS,SAAS,CACZW,OAAQE,EAAMC,YAnBlBvB,EAAKiB,MAAQ,CACXP,MAAOK,KAAKM,UAAU,CAACG,KAAM,SAAUC,IAAK,IAAK,KAAM,GACvDL,OAAQ,IAJcpB,mFA2BxBG,KAAKU,8CAGE,IACAa,EAAWvB,KAAKJ,MAAhB2B,QAEP,OACEzC,EAAA,cAACC,EAAA,EAAD,CAAMyC,WAAS,EAACC,QAAS,IACvB3C,EAAA,cAACC,EAAA,EAAD,CAAM2C,MAAI,EAACC,GAAI,GAAIC,GAAI,GACrB9C,EAAA,cAACC,EAAA,EAAD,CAAO8C,UAAWN,EAAQO,MACxBhD,EAAA,cAACC,EAAA,EAAD,CAAYE,QAAQ,KAAK8C,UAAU,MAAnC,SAGAjD,EAAA,cAACC,EAAA,EAAD,CACEiD,WAAS,EACTC,WAAW,2CACXC,GAAG,oBACH5C,OAAO,SACP6C,WAAW,EACXC,SAAUpC,KAAKI,YACfiC,YAAarC,KAAKc,MAAMP,MACxB+B,KAAM,EACNC,QAASC,IACTnD,MAAO,CAACC,OAAQ,GAChBL,QAAQ,SACRwD,gBAAiB,CACfC,QAAQ,OAKhB5D,EAAA,cAACC,EAAA,EAAD,CAAM2C,MAAI,EAACC,GAAI,GAAIC,GAAI,GACrB9C,EAAA,cAACC,EAAA,EAAD,CAAO8C,UAAWN,EAAQO,MACxBhD,EAAA,cAACC,EAAA,EAAD,CAAYE,QAAQ,KAAK8C,UAAU,MAAnC,UAGAjD,EAAA,cAACC,EAAA,EAAD,CACE4D,UAAQ,EACRX,WAAS,EACTC,WAAW,oCACXC,GAAG,oBACH5C,OAAO,SACP6C,WAAW,EACXG,KAAM,EACNC,QAASC,IACTnD,MAAO,CAACC,OAAQ,GAChBmB,MAAOT,KAAKc,MAAMG,OAClBhC,QAAQ,SACRwD,gBAAiB,CACfC,QAAQ,eA7EFvD,aAuFPyD,uBAvGA,SAACC,GAAD,OACbC,uBAAa,CACXhB,KAAM,CACJiB,aAAc,GACdC,UAAW,GACXC,QAAS,OAkGAL,CAAmBjD,GC5FnBuD,mLAVX,OACEpE,EAAA,cAACA,EAAA,SAAD,KACEA,EAAA,cAACqE,EAAD,MACArE,EAAA,cAACsE,EAAD,MACAtE,EAAA,cAACuE,EAAD,cANUlE,aCJZmE,UAAcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MAAM,4DA0CnC,SAASC,EAAgBC,EAAeC,GACtCC,UAAUC,cACPC,SAASJ,GACTK,KAAK,SAAAC,GACJA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACd,MAApBD,IAGJA,EAAiBE,cAAgB,WACA,cAA3BF,EAAiBvD,QACfiD,UAAUC,cAAcQ,YAI1BC,QAAQC,IACN,gHAKEZ,GAAUA,EAAOa,UACnBb,EAAOa,SAASR,KAMlBM,QAAQC,IAAI,sCAGRZ,GAAUA,EAAOc,WACnBd,EAAOc,UAAUT,UAO5BU,MAAM,SAAA1D,GACLsD,QAAQtD,MAAM,4CAA6CA,KCjFjE2D,IAASC,OAAOC,EAAAC,EAAAC,cAACC,EAAD,MAASC,SAASC,eAAe,SDO1C,SAAkBvB,GACvB,GAA6C,kBAAmBC,UAAW,CAGzE,GADkB,IAAIuB,IAAKC,GAA2D/B,OAAOC,SAAS+B,MACxFC,SAAWjC,OAAOC,SAASgC,OAIvC,OAGFjC,OAAOkC,iBAAiB,OAAQ,WAC9B,IAAM7B,EAAK,GAAA8B,OAAMJ,GAAN,sBAEPjC,GAgEV,SAAiCO,EAAeC,GAE9C8B,MAAM/B,GACHK,KAAK,SAAA2B,GAEJ,IAAMC,EAAcD,EAASE,QAAQC,IAAI,gBACjB,MAApBH,EAASI,QAAkC,MAAfH,IAA8D,IAAvCA,EAAYI,QAAQ,cAEzEnC,UAAUC,cAAcmC,MAAMjC,KAAK,SAAAC,GACjCA,EAAaiC,aAAalC,KAAK,WAC7BV,OAAOC,SAAS4C,aAKpBzC,EAAgBC,EAAOC,KAG1Be,MAAM,WACLJ,QAAQC,IAAI,mEAjFV4B,CAAwBzC,EAAOC,GAI/BC,UAAUC,cAAcmC,MAAMjC,KAAK,WACjCO,QAAQC,IACN,+GAMJd,EAAgBC,EAAOC,MCjC/BE","file":"static/js/main.d93cc018.chunk.js","sourcesContent":["import {AppBar, Toolbar, Typography} from '@material-ui/core';\nimport * as React from 'react';\n\nclass Header extends React.Component {\n  render() {\n    return (\n      <AppBar position=\"static\">\n        <Toolbar>\n          <Typography variant=\"headline\" color=\"inherit\">\n            Sort JSON\n          </Typography>\n        </Toolbar>\n      </AppBar>\n    );\n  }\n}\n\nexport {Header};\n","import {Typography} from '@material-ui/core';\nimport * as React from 'react';\n\nclass Footer extends React.Component {\n  render() {\n    return (\n      <Typography style={{margin: 10}} gutterBottom={true} align=\"left\">\n        {`Version 1.0`}\n      </Typography>\n    );\n  }\n}\n\nexport {Footer};\n","import {Grid, Paper, TextField, Theme, Typography, WithStyles, createStyles, withStyles} from '@material-ui/core';\nimport * as React from 'react';\n\nconst jsonAbc = require('jsonabc');\n\nconst styles = (theme: Theme) =>\n  createStyles({\n    Pane: {\n      marginBottom: 10,\n      marginTop: 10,\n      padding: 20,\n    },\n  });\n\ninterface Props extends WithStyles<typeof styles> {}\n\ninterface State {\n  input: string;\n  output: string;\n}\n\nclass Content extends React.Component<Props, State> {\n  constructor(props: Props) {\n    super(props);\n    this.state = {\n      input: JSON.stringify({name: 'Sophie', age: 50}, null, 2),\n      output: '',\n    };\n  }\n\n  handleInput = (event: React.ChangeEvent<HTMLTextAreaElement>) => {\n    this.setState({input: event.currentTarget.value}, this.formatJSON);\n  };\n\n  formatJSON = () => {\n    try {\n      const object = JSON.parse(this.state.input);\n      const sorted = jsonAbc.sortObj(object);\n      this.setState({\n        output: JSON.stringify(sorted, null, 2),\n      });\n    } catch (error) {\n      this.setState({\n        output: error.message,\n      });\n    }\n  };\n\n  componentDidMount() {\n    this.formatJSON();\n  }\n\n  render() {\n    const {classes} = this.props;\n\n    return (\n      <Grid container spacing={24}>\n        <Grid item xs={12} sm={6}>\n          <Paper className={classes.Pane}>\n            <Typography variant=\"h5\" component=\"h3\">\n              Input\n            </Typography>\n            <TextField\n              fullWidth\n              helperText=\"Please paste your unformatted JSON here.\"\n              id=\"filled-full-width\"\n              margin=\"normal\"\n              multiline={true}\n              onChange={this.handleInput}\n              placeholder={this.state.input}\n              rows={4}\n              rowsMax={Infinity}\n              style={{margin: 8}}\n              variant=\"filled\"\n              InputLabelProps={{\n                shrink: true,\n              }}\n            />\n          </Paper>\n        </Grid>\n        <Grid item xs={12} sm={6}>\n          <Paper className={classes.Pane}>\n            <Typography variant=\"h5\" component=\"h3\">\n              Output\n            </Typography>\n            <TextField\n              disabled\n              fullWidth\n              helperText=\"Formatted and sorted JSON result.\"\n              id=\"filled-full-width\"\n              margin=\"normal\"\n              multiline={true}\n              rows={4}\n              rowsMax={Infinity}\n              style={{margin: 8}}\n              value={this.state.output}\n              variant=\"filled\"\n              InputLabelProps={{\n                shrink: true,\n              }}\n            />\n          </Paper>\n        </Grid>\n      </Grid>\n    );\n  }\n}\n\nexport default withStyles(styles)(Content);\n","import * as React from 'react';\nimport {Footer, Header} from './components/layout/';\nimport Content from './components/layout/Content';\n\nclass App extends React.Component {\n  render() {\n    return (\n      <React.Fragment>\n        <Header />\n        <Content />\n        <Footer />\n      </React.Fragment>\n    );\n  }\n}\n\nexport default App;\n","const isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL((process as {env: {[key: string]: string}}).env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (response.status === 404 || (contentType != null && contentType.indexOf('javascript') === -1)) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nserviceWorker.register();\n"],"sourceRoot":""}